[{"C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\index.js":"1","C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\reportWebVitals.js":"2","C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\RockPaperScissors.js":"3"},{"size":577,"mtime":1689151140131,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1689149422999,"results":"6","hashOfConfig":"5"},{"size":5215,"mtime":1689155582936,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s4cahh",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\index.js",[],[],"C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\reportWebVitals.js",[],[],"C:\\Users\\meets\\Documents\\GitHub\\Rock-Paper-Scissors\\src\\RockPaperScissors.js",["18","19","20","21"],[],"import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport paperImg from \"./paper-emoji.png\";\nimport scissorsImg from \"./scissors-emoji.png\"\nimport rockImg from \"./rock-emoji.png\"\n\nconst RockPaperScissors = () => {\n  const [score, setScore] = useState(\n    JSON.parse(localStorage.getItem(\"score\")) || {\n      wins: 0,\n      losses: 0,\n      ties: 0,\n    }\n  );\n  const [isAutoPlaying, setIsAutoPlaying] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [result, setResult] = useState(\"\");\n  const [playerMove, setPlayerMove] = useState(\"\");\n  const [computerMove, setComputerMove] = useState(\"\");\n\n\n  useEffect(() => {\n    updateScoreElement();\n    document.body.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.body.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"score\", JSON.stringify(score));\n    updateScoreElement();\n  }, [score]);\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"r\") {\n      playGame(\"rock\");\n    } else if (event.key === \"p\") {\n      playGame(\"paper\");\n    } else if (event.key === \"s\") {\n      playGame(\"scissors\");\n    }\n  };\n\n  const autoPlay = () => {\n    if (!isAutoPlaying) {\n      setIntervalId(\n        setInterval(() => {\n          const playerMove = pickComputerMove();\n          playGame(playerMove);\n        }, 1000)\n      );\n      setIsAutoPlaying(true);\n    } else {\n      clearInterval(intervalId);\n      setIsAutoPlaying(false);\n    }\n  };\n\n  const playGame = (playerMove) => {\n    setPlayerMove(playerMove);\n    const computerMove = pickComputerMove();\n    setComputerMove(computerMove);\n\n    let result = \"\";\n\n    if (playerMove === \"scissors\") {\n      if (computerMove === \"rock\") {\n        result = \"You lose.\";\n      } else if (computerMove === \"paper\") {\n        result = \"You win.\";\n      } else if (computerMove === \"scissors\") {\n        result = \"Tie.\";\n      }\n    } else if (playerMove === \"paper\") {\n      if (computerMove === \"rock\") {\n        result = \"You win.\";\n      } else if (computerMove === \"paper\") {\n        result = \"Tie.\";\n      } else if (computerMove === \"scissors\") {\n        result = \"You lose.\";\n      }\n    } else if (playerMove === \"rock\") {\n      if (computerMove === \"rock\") {\n        result = \"Tie.\";\n      } else if (computerMove === \"paper\") {\n        result = \"You lose.\";\n      } else if (computerMove === \"scissors\") {\n        result = \"You win.\";\n      }\n    }\n\n    setResult(result);\n\n    if (result === \"You win.\") {\n      setScore((prevScore) => ({ ...prevScore, wins: prevScore.wins + 1 }));\n    } else if (result === \"You lose.\") {\n      setScore((prevScore) => ({ ...prevScore, losses: prevScore.losses + 1 }));\n    } else if (result === \"Tie.\") {\n      setScore((prevScore) => ({ ...prevScore, ties: prevScore.ties + 1 }));\n    }\n  };\n\n  const updateScoreElement = () => { };\n\n  const pickComputerMove = () => {\n    const randomNumber = Math.random();\n\n    let computerMove = \"\";\n\n    if (randomNumber >= 0 && randomNumber < 1 / 3) {\n      computerMove = \"rock\";\n    } else if (randomNumber >= 1 / 3 && randomNumber < 2 / 3) {\n      computerMove = \"paper\";\n    } else if (randomNumber >= 2 / 3 && randomNumber < 1) {\n      computerMove = \"scissors\";\n    }\n\n    return computerMove;\n  };\n\n  return (\n    <>\n    <h1>Rock Paper Scissors</h1>\n      <div className='move-button-list'>\n        <MoveButton move=\"rock\" onClick={() => playGame(\"rock\")} />\n        <MoveButton move=\"paper\" onClick={() => playGame(\"paper\")} />\n        <MoveButton move=\"scissors\" onClick={() => playGame(\"scissors\")} />\n      </div>\n      <Result result={result} />\n      <Moves playerMove={playerMove} computerMove={computerMove} />\n      <Score score={score} />\n\n      <ResetScoreButton\n        onClick={() => {\n          setScore({ wins: 0, losses: 0, ties: 0 });\n          localStorage.removeItem(\"score\");\n          updateScoreElement();\n        }}\n      />\n\n      <AutoPlayButton onClick={() => autoPlay()} />\n    </>\n  );\n};\n\nconst MoveButton = ({ move, onClick }) => (\n  <button className={`move-button js-${move}-button`} onClick={onClick}>\n    <img src={move === 'rock' ? rockImg : move === 'paper' ? paperImg : scissorsImg} className=\"move-icon\" />\n  </button>\n);\n\nconst Result = ({ result }) => <p className=\"js-result result\">{result}</p>;\n\nconst Moves = ({ playerMove, computerMove }) => (\n  <p className=\"js-moves\">\n    Your Move \n    <img src={playerMove === 'rock' ? rockImg : playerMove === 'paper' ? paperImg : scissorsImg} className=\"move-icon\" />\n     VS \n    <img src={computerMove === 'rock' ? rockImg : computerMove === 'paper' ? paperImg : scissorsImg} className=\"move-icon\" />\n    Computers Move\n  </p>\n);\n\nconst Score = ({ score }) => (\n  <p className=\"js-score score\">\n    Wins: {score.wins}, Losses: {score.losses}, Ties: {score.ties}\n  </p>\n);\n\nconst ResetScoreButton = ({ onClick }) => (\n  <button onClick={onClick} className=\"reset-score-button js-reset-score-button\">\n    Reset Score\n  </button>\n);\n\nconst AutoPlayButton = ({ onClick }) => (\n  <button className=\"auto-play-button\" onClick={onClick}>\n    Auto Play\n  </button>\n);\n\nexport default RockPaperScissors;",{"ruleId":"22","severity":1,"message":"23","line":28,"column":6,"nodeType":"24","endLine":28,"endColumn":8,"suggestions":"25"},{"ruleId":"26","severity":1,"message":"27","line":149,"column":5,"nodeType":"28","endLine":149,"endColumn":110},{"ruleId":"26","severity":1,"message":"27","line":158,"column":5,"nodeType":"28","endLine":158,"endColumn":122},{"ruleId":"26","severity":1,"message":"27","line":160,"column":5,"nodeType":"28","endLine":160,"endColumn":126},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["29"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"30","fix":"31"},"Update the dependencies array to be: [handleKeyDown]",{"range":"32","text":"33"},[857,859],"[handleKeyDown]"]